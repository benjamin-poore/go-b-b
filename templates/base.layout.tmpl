{{define "base"}}
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <!-- CSS only -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/css/datepicker-bulma.min.css">
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
        <title>Document</title>
        <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
    </head>
    <body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">Navbar</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <a class="nav-link active" aria-current="page" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Rooms
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="/generals-quarters">General's Quarters</a></li>
                            <li><a class="dropdown-item" href="/majors-suite">Major's Suite</a></li>
                        </ul>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/search-availability">Book Now</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    {{block "content" .}}

    {{end}}


    <div class="row my-footer">
        <div class="col">
            left
        </div>
        <div class="col">
            middle
        </div>
        <div class="col">
            right
        </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        let attention = Prompt();
        (() => {
            'use strict'
            const forms = document.querySelectorAll('.needs-validation')
            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }
                    form.classList.add('was-validated')
                }, false)
            })
        })()

        function notify(msg, msgType){
            notie.alert({
                type: msgType,
                text: msg,
            })
        }

        function notifyModal(title, text, icon, confirmText){
            Swal.fire({
                title: title,
                html: text,
                icon: icon,
                confirmButtonText: confirmText
            })
        }




        function Prompt() {
            let toast = function (c) {
                const{msg = '',icon = 'success',position = 'top-end'} = c;

                const Toast = Swal.mixin({
                    toast: true,
                    title: msg,
                    position: position,
                    icon: icon,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    didOpen: (toast) => {
                        toast.addEventListener('mouseenter', Swal.stopTimer)
                        toast.addEventListener('mouseleave', Swal.resumeTimer)
                    }
                })

                Toast.fire({})
            }

            let success = (c) => {
                const{msg = '', title = '', footer = ''} = c
                Swal.fire({
                    icon: 'success',
                    title,
                    text: msg,
                    footer
                })
            }

            let error = (c) => {
                const{msg = '', title = '', footer = ''} = c
                Swal.fire({
                    icon: 'error',
                    title,
                    text: msg,
                    footer
                })
            }

            let custom = async (c) => {
                const {msg =  "", title = ""} = c;
                const {value: result} = await Swal.fire({
                    title: title,
                    html: msg,
                    backdrop: false,
                    focusConfirm: false,
                    showCancelButton: true,
                    willOpen: () =>{
                        if(c.willOpen !== undefined){
                            c.willOpen();
                        }
                    },
                    didOpen: ()=>{
                        if(c.didOpen !== undefined){
                            c.didOpen();
                        }
                    },
                    preConfirm: () => {
                        if(c.preConfirm !== undefined){
                            c.preConfirm();
                        }
                    }
                })

                if(result) {
                    if(result.dismiss !==  Swal.DismissReason.cancel){
                        if(result.value !== ""){
                            if(c.callback !== undefined){
                                c.callback(result);
                            }
                        }else{
                            c.callback(false);
                        }
                    }else{
                        c.callback(false);
                    }
                }
            }
            return {
                toast:toast,
                success: success,
                error: error,
                custom: custom
            }
        }
    </script>

    {{block "js" .}}

    {{end}}

    </body>
    </html>
{{end}}